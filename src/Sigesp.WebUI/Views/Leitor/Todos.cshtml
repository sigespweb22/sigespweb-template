@model Sigesp.Application.ViewModels.Cards.LeitorCardViewModel

@{
	ViewData["Title"] = "Leitores";
	ViewData["PageName"] = "leitor_todos";
	ViewData["Category0"] = @Settings.App;
	ViewData["Category1"] = "Educação";
	ViewData["Heading"] = "<i class='subheader-icon fal fa-book-reader'></i> Leitores<span class='fw-300'></span> <sup class='badge badge-primary fw-500'>NOVO</sup>";
	ViewData["PageDescription"] = "Listagem dos participantes do projeto DESPERTAR pela LEITURA";
}
@section HeadBlock {
	<link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/toastr/toastr.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/sweetalert2/sweetalert2.bundle.css">
}

<div class="row">
	<div class="col-sm-6 col-xl-4">
		<div class="p-3 bg-info rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Total
					<small class="m-0 l-h-n">Total</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-book-reader position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-4">
		<div class="p-3 bg-success rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Ativos
					<small class="m-0 l-h-n">Ativos</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-book-reader position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-4">
		<div class="p-3 bg-danger rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Inativos
					<small class="m-0 l-h-n">Inativos</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-users-slash position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-xl-12">
		<div id="panel-1" class="panel">
			<div class="panel-hdr">	
				<h2>
					Gerenciamento de <span class="fw-300"><i>Leitores</i></span> 
				</h2>
				<div class="panel-toolbar">
					<button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Abrir/Fechar"></button>
				</div>
			</div>
			<div class="panel-container show">
				<div class="panel-content">									
					<div class="tab-content pt-4">
						<div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
							<div class="row">
								<div class="col-xl-12">
									<table id="dt-basic-example" class="table table-bordered table-hover table-striped w-100"></table>
								</div>
							</div>	
						</div>
					</div>					
				</div>
			</div>
		</div>
	</div>
</div>

@section ScriptsBlock {
<script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
<script src="~/js/dependency/moment/moment.js"></script>
<script src="~/js/formplugins/select2/select2.bundle.js"></script>
<script src="~/js/datagrid/datatables/datatables.export.js"></script>
<script src="~/js/notifications/toastr/toastr.js"></script>
<script src="~/js/extensions/automapper-extensions.js"></script>
<script src="~/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>

<script type="text/javascript">
	const endpointLeitores = "/api/leitores";
	const endpointLeitoresNovo = "/api/leitores/novo";
	const endpointLeitoresEdicao = "/api/leitores/edicao";
	const endpointLeitoresDelete = "/api/leitores/delete";
	const endpointLeitoresLista = "/api/leitores/lista";

	var boolOptions = ["SIM", "NÃO"];
	var professores = [];
	var generos = [];
	var detentos = [];
	var escolaridades = [];
	var ocorrenciasDesistencia = [];

	@* @foreach (var genero in @Model.Generos)
	{
		@:tmp = { id: "@genero.Id", nome: "@genero.Nome" };

		@:generos.push(tmp);
	} *@

	console.log(generos);

	@foreach (var professor in @Model.Professores)
	{
		@:professores.push('@professor');
	}

	@foreach (var genero in @Model.Generos)
	{
		@:generos.push('@genero');
	}

	@foreach (var detento in @Model.Detentos)
	{
		@:detentos.push('@detento');
	}

	@foreach (var escolaridade in @Model.Escolaridades)
	{
		@:escolaridades.push('@escolaridade');
	}

	@foreach (var ocorrenciaDesistencia in @Model.OcorrenciasDesistencia)
	{
		@:ocorrenciasDesistencia.push('@ocorrenciaDesistencia');
	}

	toastr.options = {
		"closeButton": false,
		"debug": false,
		"newestOnTop": true,
		"progressBar": true,
		"positionClass": "toast-top-right",
		"preventDuplicates": true,
		"onclick": null,
		"showDuration": 500,
		"hideDuration": 100,
		"timeOut": 10000,
		"extendedTimeOut": 1000,
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "fadeIn",
		"hideMethod": "fadeOut"
	}

	var oldExportAction = function (self, e, dt, button, config) {
		if (button[0].className.indexOf('buttons-excel') >= 0) {
			if ($.fn.dataTable.ext.buttons.excelHtml5.available(dt, config)) {
				$.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config);
			}
			else {
				$.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
			}
		} else if (button[0].className.indexOf('buttons-print') >= 0) {
			$.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
		}
	};

	var newExportAction = function (e, dt, button, config) {
		var self = this;
		var oldStart = dt.settings()[0]._iDisplayStart;

		dt.one('preXhr', function (e, s, data) {
			// Just this once, load all data from the server...
			data.start = 0;
			data.length = 2147483647;

			dt.one('preDraw', function (e, settings) {
				// Call the original action function 
				oldExportAction(self, e, dt, button, config);

				dt.one('preXhr', function (e, s, data) {
					// DataTables thinks the first item displayed is index 0, but we're not drawing that.
					// Set the property to what it was before exporting.
					settings._iDisplayStart = oldStart;
					data.start = oldStart;
				});

				// Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
				setTimeout(dt.ajax.reload, 0);

				// Prevent rendering of the full data to the DOM
				return false;
			});
		});

		// Requery the server with the new one-time export settings
		dt.ajax.reload();
	};

	var getDetentoByIpen = function (ipen) {
		var ipen = $("#detentoIpen").val();

		if (ipen.length < 6 || ipen.length > 6)
		{
			$('#detentoNome').select2().val(null);
			$('#detentoNome').select2();

			$('#detentoGaleria').val("");
			$('#detentoCela').val("");

			toastr["error"]("Ipen inválido!");
		}
		else
		{
			$.ajax({ 
				url: "/api/detentos/get-by-ipen", 
				type: 'POST',
				contentType: "application/json;charset=utf-8",
				data: JSON.stringify(ipen, null, 4),
				success: function(success) {
					$('#detentoNome').select2().val(success.nome);
					$('#detentoNome').select2();

					$('#detentoGaleria').val(success.galeria);
					$('#detentoCela').val(success.cela);

					$('#escolaridade').select2('focus');
				},
				error: function (error, jqXHR, textStatus, errorThrown) {
					const returnObj = Object.entries(error.responseJSON.errors);

					returnObj.forEach(function(err) {
						err[1].forEach(function (int) {
							toastr["error"](err[0], int);
						})
					});
				}
			});
		}
	}

	$(document).ready( function () {	
		$(".select2").select2({ 
        	dropdownParent: $("#myModal") 
    	}); 

		//Tecla de atalho para criar um novo registro (CTRL + Z)			
		$(document).keydown(function(e) {
			if (e.ctrlKey && e.which === 90) $(".btn-add").click();				

			$(document).on("change", "#detentoIpen", function () {
				getDetentoByIpen();
			});
		});

		//No evento de click do botão add, set focus no campo nome depois abre a select2
		$(document).on("click", ".btn-add", function () {
			setTimeout(function() {
				$("#detentoIpen").focus();

				//set value default isEnturmado
				$('#isEnturmado').val("NÃO");
				$('#isEnturmado').select2();
			}, 500);
		});

		//No evento de click do botão edit, disabilita alguns campos
		$(document).on("click", ".btn-edit", function () {
			setTimeout(function() {
				$("#detentoIpen").prop("disabled", true);
				$("#detentoNome").prop("disabled", true);
			}, 500);
		});

		// Event Lot
		var events = $("#app-eventlog");

		// Column Definitions
		var columnSet = [
			{
				title: "Id",
				id: "id",
				data: "id",
				placeholderMsg: "Automático",
				visible: false,
				type: "readonly",
				required: false
			},
			{
				title: "Ipen",
				id: "detentoIpen",
				data: "detentoIpen",
				type: "text",
				placeholderMsg: "Informe o IPEN",
				required: true,
				searchable: true,
				orderable: true,
				visible: true,
				name: "Detento.Ipen",
				render: function(data, type, row, meta) {
					return data;
				}
			},
			{
				title: "Nome",
				data: "detentoNome",
				id: "detentoNome",
				type: "select",
				multiple : false,
				options: detentos,
				visible: true,
				select2 : {
					placeholder: "Selecione um reeducando",
					width: "100%",
					allowClear: true,
					minimumInputLength: 3,
					language: {
						inputTooShort: function() {
							return 'Digite 3 ou mais caracteres para iniciar a busca';
						}
					}
				},
				editorOnChange : function(event, altEditor) {
					var detentoNome = $(event.currentTarget).val();
					
					if (detentoNome != null)
					{
						$.ajax({
							url: "api/detentos/get-by-nome",
							type: 'POST',
							contentType: "application/json;charset=utf-8",
							data: JSON.stringify(detentoNome, null, 4),
							success: function(success) {
								$("#detentoIpen").val(success.ipen);
								$("#detentoGaleria").val(success.galeria);
								$("#detentoCela").val(success.cela);

								$("#escolaridade").select2('focus');
							},
							error: function (error, jqXHR, textStatus, errorThrown) {
								const returnObj = Object.entries(error.responseJSON.errors);

								returnObj.forEach(function(err) {
									err[1].forEach(function (int) {
										toastr["error"](err[0], int);
									})
								});
							}
						});	
					}
				},
				searchable: true,
				orderable: true,
				required: true,
				name: "Detento.Nome"
			},
			{
				title: "Galeria",
				id: "detentoGaleria",
				data: "detentoGaleria",
				placeholderMsg: "Auto",
				type: "readonly",
				visible: true,
				searchable: false,
				orderable: true,
				required: false,
				render: function(data) {
					return data;
				},
				name: "Detento.Galeria"
			},
			{
				title: "Cela",
				id: "detentoCela",
				data: "detentoCela",
				type: "number",
				placeholderMsg: "Auto",
				type: "readonly",
				visible: true,
				required: false,
				searchable: false,
				orderable: true,
				name: "Detento.Cela"
			},
			{
				title: "Escolaridade",
				data: "escolaridade",
				id: "escolaridade",
				type: "select",
				multiple : false,
				options: escolaridades,
				visible: true,
				select2 : {
					placeholder: "Selecione uma escolaridade",
					width: "100%",
					allowClear: true,
					minimumInputLength: 3,
					language: {
						inputTooShort: function() {
							return 'Digite 3 ou mais caracteres para iniciar a busca';
						}
					}
				},
				searchable: false,
				orderable: true,
				required: true,
				name: "Escolaridade"
			},
			{
				title: "Professor",
				data: "professorNome",
				id: "professorNome",
				type: "select",
				multiple : false,
				options: professores,
				visible: true,
				select2 : {
					placeholder: "Selecione um professor",
					width: "100%",
					allowClear: true,
					minimumInputLength: 3,
					language: {
						inputTooShort: function() {
							return 'Digite 3 ou mais caracteres para iniciar a busca';
						}
					}
				},
				searchable: false,
				orderable: true,
				required: true,
				name: "Professor.Nome"
			},
			{
				title: "Livro gênero",
				data: "livroGeneroNome",
				id: "livroGeneroNome",
				type: "select",
				multiple : false,
				options: generos,
				visible: true,
				select2 : {
					placeholder: "Selecione um gênero de livro",
					width: "100%",
					allowClear: true,
					minimumInputLength: 3,
					language: {
						inputTooShort: function() {
							return 'Digite 3 ou mais caracteres para iniciar a busca';
						}
					}
				},
				searchable: false,
				orderable: true,
				required: true,
				name: "LivroGenero.Nome",
				render: function (data) {
					return data;
				}
			},
			{
				title: "Ceja Id",
				id: "cejaId",
				data: "cejaId",
				type: "text",
				visible: false,
				searchable: false,
				orderable: false,
				required: false,
				name: "CejaId"
			},
			{
				title: "Ceja Matrícula",
				id: "cejaMatricula",
				data: "cejaMatricula",
				type: "text",
				visible: false,
				searchable: false,
				orderable: false,
				required: false,
				name: "CejaMatricula"
			},
			{
				title: "Data matrícula CEJA",
				id: "cejaDataMatricula",	
				data: "cejaDataMatricula",
				type: "date",
				required: false,
				searchable: false,
				visible: false,
				render: function (data) {
					return moment(data).format('DD/MM/YYYY');
				},
				name: "CejaDataMatricula"
			},
			{
				title: "Enturmado?",
				data: "isEnturmado",
				id: "isEnturmado",
				type: "select",
				options: boolOptions,
				searchable: false,
				multiple : false,
				visible: true,
				select2 : { width: "100%" },
				orderable: true,
				required: true,
				name: "IsEnturmado"
			},
			{
				title: "Data pedido enturmação CEJA",
				id: "dataPedidoEnturmacao",	
				data: "dataPedidoEnturmacao",
				type: "date",
				required: false,
				searchable: false,
				visible: false,
				render: function (data) {
					return moment(data).format('DD/MM/YYYY');
				},
				name: "DataPedidoEnturmacao"
			},
			{
				title: "Data ocorrência",
				id: "dataUltimoIsDeletedOcorrencia",	
				data: "dataUltimoIsDeletedOcorrencia",
				type: "date",
				required: false,
				searchable: false,
				visible: false,
				render: function (data) {
					return moment(data).format('DD/MM/YYYY');
				},
				name: "DataUltimoIsDeletedOcorrencia"
			},
			{
				title: "Ocorrência desistência",
				data: "ocorrenciasDesistencia",
				id: "ocorrenciasDesistencia",
				type: "select",
				multiple : false,
				options: ocorrenciasDesistencia,
				visible: false,
				select2 : {
					placeholder: "Selecione uma ocorrência",
					width: "100%",
					allowClear: true,
					minimumInputLength: 3,
					language: {
						inputTooShort: function() {
							return 'Digite 3 ou mais caracteres para iniciar a busca';
						}
					}
				},
				searchable: false,
				orderable: true,
				required: true,
				name: "OcorrenciasDesistencia"
			}
		];

		/* start data table */
		var myTable = $('#dt-basic-example').dataTable({
			/* check datatable buttons page for more info on how this DOM structure works */
			dom: "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'B>>" +
				"<'row'<'col-sm-12'tr>>" +
				"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",			
			ajax: {
				url : endpointLeitoresLista,
				type: 'POST',
				dataSrc: function (json) {
					return transformObjArrayFieldBoolBackToFront(json.data.data);
				}
        	},
			columns: columnSet,
			/* selecting multiple rows will not work */
			select: 'single',
			/* altEditor at work */
			altEditor: true,
			responsive: true,
			/* buttons uses classes from bootstrap, see buttons page for more details */
			buttons: [
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
					name: 'delete',
					className: 'btn-danger btn-sm mr-1 btn-actions'
				},
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Editar',
					name: 'edit',
					className: 'btn-warning btn-sm mr-1 btn-actions btn-edit'
				},
				{
					text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Novo',
					name: 'add',
					className: 'btn-primary btn-sm mr-1 btn-actions btn-add'
				},
				{
					extend: 'excelHtml5',
					text: 'Excel',
					exportOptions: {
						columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
					},
					className: 'btn-outline-success btn-sm',
					action: newExportAction
				}							
			],
			serverSide: true,
			processing: true,
			pagingType: "full_numbers",
			language: {
				select: {
					rows: "%d linhas selecionadas"
				},
            	decimal: ",",
            	thousands: ".",
        		searchPlaceholder: "Busque pelo IPEN ou NOME",
				sProcessing: '<span id=\"loading-image\" "class="fa fa-spinner fa-spin fa-2x spinner-border spinner-border-sm text-primary mr-2""><img class="manImg" src="img/loading_alt_3.gif" width="50" height="50"></img></span>',
				sZeroRecords: "Nenhum registro encontrado.",
				oPaginate: {
                    "sFirst": "Primeiro",
                    "sPrevious": "Anterior",
                    "sNext": "Próximo",
                    "sLast": "Último"
                },
				sInfo: "Mostrando _START_ de _END_ de um total de _TOTAL_",
                sInfoEmpty: "Nenhuma registro encontrado.",
                sInfoFiltered: " (filtrado a partir de um total de _MAX_ registros)",
                sInfoPostFix: ""
        	},
			columnDefs: [],
			/* default callback for insertion: mock webservice, always success */
			onAddRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: endpointLeitoresNovo, 
					type: 'POST',
					contentType: "application/json;charset=utf-8",
					@* headers:{
            			"Authorization": "Basic " + ""
        			}, *@
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					beforeSend: function (xhr, settings) {
    				},
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro criado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						$('#dt-basic-example').dataTable().api().ajax.reload();

						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onEditRow: function(dt, rowdata, success, error) {
				$.ajax({
					url: endpointLeitoresEdicao, 
					type: 'PUT',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro atualizado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						$('#dt-basic-example').dataTable().api().ajax.reload();

						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onDeleteRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: endpointLeitoresDelete, 
					type: 'DELETE', 
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4), 
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro deletado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						$('#dt-basic-example').dataTable().api().ajax.reload();

						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			}		
		});

		$('#dt-basic-example_filter input').bind('keyup', function(e) {
			$('#dt-basic-example_filter input').val($('#dt-basic-example_filter input').val().toUpperCase());
		});

	});
</script>
}