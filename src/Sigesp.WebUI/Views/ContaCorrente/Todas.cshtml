@model Sigesp.Application.ViewModels.Cards.ContaCorrenteCardViewModel

@{
	ViewData["Title"] = "Contas Correntes";
	ViewData["PageName"] = "conta-corrente_todas";
	ViewData["Category0"] = @Settings.App;
	ViewData["Category1"] = "Pecúlio";
	ViewData["Heading"] = "<i class='subheader-icon fal fa-users'></i> Contas Correntes<span class='fw-300'></span> <sup class='badge badge-primary fw-500'>NOVO</sup>";
	ViewData["PageDescription"] = "Listagem de todas as contas correntes";
}
@section HeadBlock {
	<link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/toastr/toastr.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/sweetalert2/sweetalert2.bundle.css">
}

<div class="row">
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-primary-300 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Ativas
					<small class="m-0 l-h-n">Ativas</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-piggy-bank position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-warning-400 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Encerradas
					<small class="m-0 l-h-n">Encerradas</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-ban position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-success-200 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Bloqueadas	
					<small class="m-0 l-h-n">Bloqueadas</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-lock position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-info-200 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Saldos
					<small class="m-0 l-h-n">Saldos</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-coins position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-xl-12">
		<div id="panel-1" class="panel">
			<div class="panel-hdr">	
				<h2>
					Gerenciamento das <span class="fw-300"><i>Contas Correntes</i></span> 
				</h2>
				<div class="panel-toolbar">
					<button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Abrir/Fechar"></button>
				</div>
			</div>
			<div class="panel-container show">
				<div class="panel-content">									
					<div class="tab-content pt-4">
						<div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
							<div class="row">
								<div class="col-xl-12">
									<table id="dt-basic-example" class="table table-bordered table-hover table-striped w-100"></table>
								</div>
							</div>	
						</div>
					</div>					
				</div>
			</div>
		</div>
	</div>
</div>

@section ScriptsBlock {
<script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
@* <script src="~/js/datagrid/datatables/dataTables.altEditor.free.js"></script> *@
<script src="~/js/formplugins/select2/select2.bundle.js"></script>
<script src="~/js/datagrid/datatables/datatables.export.js"></script>
<script src="~/js/notifications/toastr/toastr.js"></script>
<script src="~/js/extensions/automapper-extensions.js"></script>
<script src="~/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>

<script type="text/javascript">
	const endpointContasCorrentes = "/api/contas-correntes";
	const urlList = `@Url.Action("List", "ContaCorrente")`;

	var colaboradores = [];
	var statuss = [];
	var tipos = [];

	var oldExportAction = function (self, e, dt, button, config) {
		if (button[0].className.indexOf('buttons-excel') >= 0) {
			if ($.fn.dataTable.ext.buttons.excelHtml5.available(dt, config)) {
				$.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config);
			}
			else {
				$.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
			}
		} else if (button[0].className.indexOf('buttons-print') >= 0) {
			$.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
		}
	};

	var newExportAction = function (e, dt, button, config) {
		var self = this;
		var oldStart = dt.settings()[0]._iDisplayStart;

		dt.one('preXhr', function (e, s, data) {
			// Just this once, load all data from the server...
			data.start = 0;
			data.length = 2147483647;

			dt.one('preDraw', function (e, settings) {
				// Call the original action function 
				oldExportAction(self, e, dt, button, config);

				dt.one('preXhr', function (e, s, data) {
					// DataTables thinks the first item displayed is index 0, but we're not drawing that.
					// Set the property to what it was before exporting.
					settings._iDisplayStart = oldStart;
					data.start = oldStart;
				});

				// Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
				setTimeout(dt.ajax.reload, 0);

				// Prevent rendering of the full data to the DOM
				return false;
			});
		});

		// Requery the server with the new one-time export settings
		dt.ajax.reload();
	};

	@foreach (var colaborador in @Model.Colaboradores)
	{
		@:colaboradores.push('@colaborador');
	}

	@foreach (var tmp in @Model.Status)
	{
		@:statuss.push('@tmp');
	}

	@foreach (var tipo in @Model.Tipos)
	{
		@:tipos.push('@tipo');
	}

</script>

<script>

	toastr.options = {
		"closeButton": false,
		"debug": false,
		"newestOnTop": true,
		"progressBar": true,
		"positionClass": "toast-top-right",
		"preventDuplicates": true,
		"onclick": null,
		"showDuration": 500,
		"hideDuration": 100,
		"timeOut": 10000,
		"extendedTimeOut": 1000,
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "fadeIn",
		"hideMethod": "fadeOut"
	}

	var boolOptions = ["SIM", "NÃO"];

	$(document).ready( function () {

		//Tecla de atalho para criar um novo registro (Teclado 'Ctrl + Z')			
		$(document).keydown(function(e) {
			if (e.ctrlKey && e.which === 90) $(".btn-add").click();
		});

		//No evento de click do botão add, set focus no campo nome depois abre a select2
		$(document).on("click", ".btn-add", function () {
			setTimeout(function() {
				$('#tipo').val('PESSOA_FISICA');
				$('#colaboradorNome').select2('focus');
			}, 500);
		});

		//No evento de click do botão edit, disabled field colaborador
		$(document).on("click", ".btn-edit", function () {
			setTimeout(function() {
				$('#colaboradorNome').select2("enable", false);
			}, 500);
		});

		// Event Lot
		var events = $("#app-eventlog");
		// Column Definitions
		var columnSet = [{
			title: "Id",
			id: "id",
			data: "id",
			placeholderMsg: "Automático",
			visible: false,
			type: "readonly",
			required: false
		},
		{
			title: "Numero",
			id: "numero",
			data: "numero",
			placeholderMsg: "Auto",
			type: "readonly",
			visible: true,			
			required: false,
			searchable: false,
			orderable: true,
			name: "Numero"
        },
		{
			title: "Ipen",
			id: "detentoIpen",
			data: "detentoIpen",
			type: "number",
			placeholderMsg: "Auto",
			type: "readonly",
			visible: true,
			required: false,
			searchable: true,
			orderable: true,
			name: "Colaborador.Detento.Ipen"
		},
		{
			title: "Galeria",
			id: "detentoGaleria",
			data: "detentoGaleria",
			type: "text",
			placeholderMsg: "Auto",
			type: "readonly",
			visible: true,
			required: false,
			searchable: true,
			orderable: true,
			name: "Colaborador.Detento.Galeria"
		},
		{
			title: "Cela",
			id: "detentoCela",
			data: "detentoCela",
			type: "number",
			placeholderMsg: "Auto",
			type: "readonly",
			visible: true,
			required: false,
			searchable: true,
			orderable: true,
			name: "Colaborador.Detento.Cela"
		},
		{
			title: "Tipo",
			data: "tipo",
			type: "readonly",
			visible: true,
			render : function (data, type, row, meta) {
				return data;
            },
			searchable: false,
			orderable: true,
			name: "Tipo"
		},
		{
			title: "Colaborador",
			data: "colaboradorNome",
			type: "select",
			options: colaboradores,
			multiple : false,
			visible: true,
            select2 : {
				placeholder: "Selecione um colaborador",
				width: "100%",
				allowClear: true,
				minimumInputLength: 3,
				language: {
					inputTooShort: function() {
						return 'Digite 3 ou mais caracteres para iniciar a busca';
					}
				}
			},
			editorOnChange : function(event, altEditor) {
				var detentoNome = $(event.currentTarget).val();

				$.ajax({
					url: "/Detento/GetIpenAndGaleriaByNome",
					type: 'POST',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(detentoNome, null, 4),
					success: function(success) {
						$("input[name=Ipen]").val(success.detentoIpenAndGaleria.ipen);
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});					
			},
			render : function (data, type, row, meta) {
				return data;
            },
			searchable: true,
			orderable: true,
			name: "Colaborador.Detento.Nome"
		},
		@* {
			title: "Descrição",
			id: "descricao",
			data: "descricao",
			placeholderMsg: "Informe uma descrição",
			type: "text",
			visible: true,			
			required: false,
			searchable: false,
			orderable: false,
			name: "Descricao"
        }, *@
		{
			title: "Saldo (R$)",
			id: "saldo",
			data: "saldo",
			type: "readonly",
			visible: true,			
			required: false,
			searchable: false,
			orderable: false,
			name: "Saldo"
        },
		{
			title: "Status",
			data: "status",
			type: "select",
			options: statuss,
			multiple : false,
			visible: true,
            select2 : { width: "100%" },
			render : function (data, type, row, meta) {
				return data;
            },			
			searchable: false,
			orderable: true,
			name: "Status"
		}
		]

		/* start data table */
		var myTable = $('#dt-basic-example').dataTable({
			/* check datatable buttons page for more info on how this DOM structure works */
			dom: "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'B>>" +
				"<'row'<'col-sm-12'tr>>" +
				"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
			ajax: {
				url : urlList,
				type: 'POST',
				dataSrc: function (json) {
					return transformObjArrayFieldBoolBackToFront(json.data.data);
				}
        	},
			columns: columnSet,
			/* selecting multiple rows will not work */
			select: 'single',
			/* altEditor at work */
			altEditor: true,
			responsive: true,
			/* buttons uses classes from bootstrap, see buttons page for more details */
			buttons: [
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
					name: 'delete',
					className: 'btn-danger btn-sm mr-1'
				},
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Editar',
					name: 'edit',
					className: 'btn-warning btn-sm mr-1 btn-edit'
				},
				{
					text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Novo',
					name: 'add',
					className: 'btn-primary btn-sm mr-1 btn-add'
				},
				{
					extend: 'excelHtml5',
					text: 'Excel',
					exportOptions: {
						columns: [0, 1, 2, 3, 4, 5, 6, 7]
                	},
					className: 'btn-outline-success btn-sm',
					action: newExportAction
            	}						
			],
			serverSide: true,
			processing: true,
			pagingType: "full_numbers",
			language: {
				select: {
					rows: "%d linhas selecionadas"
				},
				decimal: ",",
				thousands: ".",
				searchPlaceholder: "Busque pelo IPEN ou NOME",
				sProcessing: '<span id=\"loading-image\" "class="fa fa-spinner fa-spin fa-2x spinner-border spinner-border-sm text-primary mr-2""><img class="manImg" src="img/loading_alt_3.gif" width="50" height="50"></img></span>',
				sZeroRecords: "Nenhum registro encontrado.",
				oPaginate: {
					"sFirst": "Primeiro",
					"sPrevious": "Anterior",
					"sNext": "Próximo",
					"sLast": "Último"
				},
				sInfo: "Mostrando _START_ de _END_ de um total de _TOTAL_",
				sInfoEmpty: "Nenhuma registro encontrado.",
				sInfoFiltered: " (filtrado a partir de um total de _MAX_ registros)",
				sInfoPostFix: ""
			},
			columnDefs: [
				{
					targets: 7,
					type: 'currency',
					render: function(data, type, full, meta) {
						//var number = Number(data.replace(/[^0-9.-]+/g,""));
						if (data >= 0) {
							return '<span class="text-success fw-500">R$ '+data+'</span>';
						} else {
							return '<span class="text-danger fw-500">R$ '+data+'</span>';
						}
					},
				}
			],
			/* default callback for insertion: mock webservice, always success */
			onAddRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: endpointContasCorrentes, 
					type: 'POST',
					contentType: "application/json;charset=utf-8",
					@* headers:{
            			"Authorization": "Basic " + ""
        			}, *@
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					beforeSend: function (xhr, settings) {
    				},
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro criado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onEditRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: endpointContasCorrentes, 
					type: 'PUT',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					beforeSend: function (xhr, settings) {
    				},
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro atualizado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onDeleteRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: endpointContasCorrentes, 
					type: 'DELETE', 
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4), 
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro deletado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			}		
		});
	});
</script>
}