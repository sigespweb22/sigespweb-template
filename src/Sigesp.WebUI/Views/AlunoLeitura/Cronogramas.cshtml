@model Sigesp.Application.ViewModels.Cards.AlunoLeituraCronogramaCardViewModel

@{
	ViewData["Title"] = "Cronogramas";
	ViewData["PageName"] = "aluno-leitura_cronogramas";
	ViewData["Category0"] = @Settings.App;
	ViewData["Category1"] = "Educação";
	ViewData["Category2"] = "Alunos";
	ViewData["Category3"] = "Leituras";
	ViewData["Heading"] = "<i class='subheader-icon fal fa-calendar-alt'></i> Cronogramas<span class='fw-300'></span> <sup class='badge badge-primary fw-500'>NOVO</sup>";
	ViewData["PageDescription"] = "Listagem dos CRONOGRAMAS de leitura do projeto DESPERTAR pela LEITURA";
}
@section HeadBlock {
	<link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/toastr/toastr.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-datepicker/bootstrap-datepicker.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/sweetalert2/sweetalert2.bundle.css">
}

<div class="row">
	<div class="col-sm-12 col-xl-4">
		<div class="p-3 bg-info rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Total
					<small class="m-0 l-h-n">Total</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-calendar-alt position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-12 col-xl-4">
		<div class="p-3 bg-success rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Ativos
					<small class="m-0 l-h-n">Ativos</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-calendar-check position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-12 col-xl-4">
		<div class="p-3 bg-danger rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Inativos
					<small class="m-0 l-h-n">Inativos</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-calendar-times position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-xl-12">
		<div id="panel-1" class="panel">
			<div class="panel-hdr">	
				<h2>
					Gerenciamento de <span class="fw-300"><i>Cronogramas</i></span> 
				</h2>
				<div class="panel-toolbar">
					<button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Abrir/Fechar"></button>
				</div>
			</div>
			<div class="panel-container show">
				<div class="panel-content">									
					<div class="tab-content pt-4">
						<div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
							<div class="row">
								<div class="col-xl-12">
									<table id="dt-basic-example" class="table table-bordered table-hover table-striped w-100"></table>
								</div>
							</div>	
						</div>
					</div>					
				</div>
			</div>
		</div>
	</div>
</div>

@section ScriptsBlock {
<script src="~/js/dependency/moment/moment.js"></script>
<script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
<script src="~/js/formplugins/select2/select2.bundle.js"></script>
<script src="~/js/datagrid/datatables/datatables.export.js"></script>
<script src="~/js/notifications/toastr/toastr.js"></script>
<script src="~/js/extensions/automapper-extensions.js"></script>
<script src="~/js/extensions/date-extensions.js"></script>
<script src="~/js/formplugins/bootstrap-datepicker/bootstrap-datepicker.js"></script>
<script src="~/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>

<script>
	toastr.options = {
		"closeButton": false,
		"debug": false,
		"newestOnTop": true,
		"progressBar": true,
		"positionClass": "toast-top-right",
		"preventDuplicates": true,
		"onclick": null,
		"showDuration": 300,
		"hideDuration": 100,
		"timeOut": 5000,
		"extendedTimeOut": 1000,
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "fadeIn",
		"hideMethod": "fadeOut"
	};

	const apiAlunosLeiturasCronogramas = "/api/alunos-leituras/cronogramas";
	const apiAlunosLeiturasCronogramasNovo = "/api/alunos-leituras/cronogramas/novo";
	const apiAlunosLeiturasCronogramasEdicao = "/api/alunos-leituras/cronogramas/edicao";
	const apiAlunosLeiturasCronogramasDelete = "/api/alunos-leituras/cronogramas/delete";
	const apiAlunosLeiturasCronogramasLista = "/api/alunos-leituras/cronogramas/lista";

	var boolOptions = ["NÃO", "SIM"];
	var controls = {
		leftArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-left" style="font-size: 1.25rem"></i>',
		rightArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-right" style="font-size: 1.25rem"></i>'
	}

	var oldExportAction = function (self, e, dt, button, config) {
		if (button[0].className.indexOf('buttons-excel') >= 0) {
			if ($.fn.dataTable.ext.buttons.excelHtml5.available(dt, config)) {
				$.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config);
			}
			else {
				$.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
			}
		} else if (button[0].className.indexOf('buttons-print') >= 0) {
			$.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
		}
	};

	var newExportAction = function (e, dt, button, config) {
		var self = this;
		var oldStart = dt.settings()[0]._iDisplayStart;

		dt.one('preXhr', function (e, s, data) {
			// Just this once, load all data from the server...
			data.start = 0;
			data.length = 2147483647;

			dt.one('preDraw', function (e, settings) {
				// Call the original action function 
				oldExportAction(self, e, dt, button, config);

				dt.one('preXhr', function (e, s, data) {
					// DataTables thinks the first item displayed is index 0, but we're not drawing that.
					// Set the property to what it was before exporting.
					settings._iDisplayStart = oldStart;
					data.start = oldStart;
				});

				// Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
				setTimeout(dt.ajax.reload, 0);

				// Prevent rendering of the full data to the DOM
				return false;
			});
		});

		// Requery the server with the new one-time export settings
		dt.ajax.reload();
	};

	var activateOrDeactivate = function (id, isDeleted) {
		
		if (id == null || id == "")
		{
			toastr["error"]("Problemas ao obter o id do registro para ativação/desativação. Tente mais tarde, caso persista o problema, informe o suporte do sistema.");
		}
		
		var action = isDeleted == "SIM" ? "DEVOLVER": "RETIRAR";

		Swal.fire({
			title: "Confirmação de ação",
			text: "Realmente deseja " + action + " o registro?",
			icon: "warning",
			showCancelButton: true,
			confirmButtonColor: "#ffc241",
			confirmButtonText: "Sim, quero "+ action +" o registro!",
			cancelButtonText: "Desistir",   
		}).then(function (result) {
			if (result.value) {
				$.ajax({
					url: "/api/lista-amarela/enable-disable",
					type: 'POST',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(id, null, 4),
					success: function(success) {
						var dataRet = success.data ? "Ativado" : "Desativado";
						
						Swal.fire({
							title: dataRet + "!",
							text: "Operação realizada com sucesso!",
							icon: "success",
							confirmButtonColor: "#1dc9b7"
						});

						$('#dt-basic-example').dataTable().api().ajax.reload();
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						toastr["error"](error);
					}
				});
			}
		});
	};

	var cleanModal = function() {
		$("#transferenciaLocal").val("");
		$("#transferenciaTipo").select2().val('NENHUM');
		$("#transferenciaDataRetornoPrevisto").val("");
		$("#transferenciaDataSaida").val("");
	};

	var runDatePicker = function () {
		// input group layout for modal demo
		$('.datepicker-datas').datepicker({
			orientation: "top left",
			todayHighlight: true,
			templates: controls,
			format: 'yyyy'
		});
	};

	var getDetentoByIpen = function (ipen) {
		var ipen = $("#detentoIpen").val();

		if (ipen.length < 6)
		{
			$("#detentoNome").select2().val(null);
			toastr["error"]("Ipen inválido!");
		}
		else
		{
			$.ajax({ 
				url: "/api/alunos/get-by-detento-ipen", 
				type: 'POST',
				contentType: "application/json;charset=utf-8",
				data: JSON.stringify(ipen, null, 4),
				success: function(success) {
					$('#exceptionMultiplesDetentos').remove();
					
					$('#detentoIpen').val(success.detentoIpen);

					$('#detentoNome').select2().val(success.detentoNome);
					$('#detentoNome').select2();

					$('#dataIngresso').focus();
				},
				error: function (error, jqXHR, textStatus, errorThrown) {
					$('#exceptionMultiplesDetentos').remove();
					
					const returnObj = Object.entries(error.responseJSON.errors);

					returnObj.forEach(function(err) {
						err[1].forEach(function (int) {
							toastr["error"](err[0], int);
						})
					});
				}
			});
		}
	};

	var getDetentoByIpenForExceptionMultiplesDetentos = function (ipen) {
		
		if (ipen.length < 6)
		{
			$("#detentoNome").select2().val(null);
			toastr["error"]("Ipen inválido!");
		}
		else
		{
			$.ajax({ 
				url: "/api/alunos/get-by-detento-ipen", 
				type: 'POST',
				contentType: "application/json;charset=utf-8",
				data: JSON.stringify(ipen, null, 4),
				success: function(success) {
					$('#exceptionMultiplesDetentos').remove();
					
					$('#detentoIpen').val(success.detentoIpen);

					$('#detentoNome').select2().val(success.detentoNome);
					$('#detentoNome').select2();

					$('#dataIngresso').focus();
				},
				error: function (error, jqXHR, textStatus, errorThrown) {
					$('#exceptionMultiplesDetentos').remove();

					const returnObj = Object.entries(error.responseJSON.errors);

					returnObj.forEach(function(err) {
						err[1].forEach(function (int) {
							toastr["error"](err[0], int);
						})
					});
				}
			});
		}
	};

	var exceptionMultiplesDetentos = function (detentos) {
		var divPrincipal = 	'<div id="exceptionMultiplesDetentos">'+
								'<hr class="mt-4 mb-g">'+
								'<div class="form-group row">'+ 
									'<div class="col-xl-3"></div>'+
									'<div class="col-xl-9">'+
										'<div class="alert alert-warning p-1 pt-3 mb-0" id="emd-before-table">'+
											'<p><strong>Encontramos mais de um aluno com o mesmo nome, portanto, escolha uma das opções abaixo.'+
										'</div>' +
										'<table class="table table-striped w-100">'+
											'<thead>'+
												'<tr>'+
													'<th>Ipen</th>'+
													'<th>Nome</th>'+                 
													'<th>Ação</th>'+
												'</tr>'+
											'</thead>'+
											'<tbody id="tbody-core">'+										
											'</tbody>'+
										'</table>'+
									'</div>'+
								'</div>'+
								'<hr class="mt-4 mb-g">'
							'</div>';

		$("#row_detentoNome").after(divPrincipal);

		detentos.forEach(function(detento) {
			var detentosInTable = '<tr>'+
								'<td>'+detento.ipen+'</td>'+
								'<td>'+detento.nome+'</td></a>'+
								'<td>'+
									'<div class="d-flex demo">'+
										'<a onclick=getDetentoByIpenForExceptionMultiplesDetentos("'+detento.ipen+'") class="text-white btn btn-sm btn-info btn-icon btn-inline-block mr-1" title="Escolher este detento"><i class="fal fa-level-up"></i></a>'+
									'</div>'+
								'</td>'+
							  '</tr>';

			$("#tbody-core").append(detentosInTable);
		});
	};

	var disabledEnabledFieldsForEdit = function (bool) {
		$("#detentoIpen").prop("disabled", bool);
		$("#detentoNome").prop("disabled", bool);
	};

	var toUpperCaseFormFields = function () {
		$("input[name=Nome]").val($("input[name=Nome]").val().toUpperCase());
	};

	$(document).ready( function () {
		//Tecla atalho CTRL + Z
		$(document).keydown(function(e) {
			if (e.ctrlKey && e.which === 90) $(".btn-add").click();
			toUpperCaseFormFields();
		});

		$(document).on("click", ".btn-actions", function () {
			$("#row_id").hide();
			$("#row_isDeleted").hide();
			$("#row_acoes").hide();
		});

		//No evento de click do botão add, set focus no campo nome depois abre a select2
		$(document).on("click", ".btn-add", function () {
			setTimeout(function() {
				$("input[name=Nome]").focus();
			}, 500);
		});
		
		//No evento de click do botão edit, disabilitar alguns campos
		$(document).on("click", ".btn-edit", function () {
			setTimeout(function() {
				$("input[name=Nome]").focus();
			}, 500);
		});

		runDatePicker();

		// Event Lot
		var events = $("#app-eventlog");

		// Column Definitions
		var columnSet = [
			{
				title: "Id",
				id: "id",
				data: "id",
				placeholderMsg: "Automático",
				type: "readonly",
				visible: false,
				required: false
			},
			{
				title: "Nome",
				id: "nome",	
				data: "nome",
				type: "text",
				required: false,
				searchable: false,
				visible: true,
				render: function (data) {
					return data;
				},
				name: "Nome"
			},
			{
				title: "Período referência",
				id: "periodoReferencia",	
				data: "periodoReferencia",
				type: "number",
				required: false,
				searchable: false,
				visible: true,
				render: function (data) {
					return data;
				},
				name: "PeriodoReferencia"
			},			
			{
				title: "Período início",
				id: "periodoInicio",	
				data: "periodoInicio",
				type: "date",
				required: false,
				searchable: false,
				visible: true,
				render: function (data) {
					return moment(data).format('DD/MM/YYYY');
				},
				name: "PeriodoInicio"
			},		
			{
				title: "Período fim",
				id: "periodoFim",	
				data: "periodoFim",
				type: "date",
				required: false,
				searchable: false,
				visible: true,
				editorOnChange : function(event, altEditor) {
					var periodoInicio = $("#periodoInicio").val();
					var periodoFim = $(event.currentTarget).val();

					$("#diasPeriodo").val(differenceInDays(periodoInicio, periodoFim));
				},
				render: function (data) {
					return moment(data).format('DD/MM/YYYY');
				},
				name: "PeriodoFim"
			},			
			{
				title: "Dias período",
				id: "diasPeriodo",	
				data: "diasPeriodo",
				type: "readonly",
				required: true,
				searchable: false,
				visible: true,
				render: function (data) {
					return data;
				},
				name: "DiasPeriodo"
			},
			{
				title: "Ano referência",
				id: "anoReferencia",	
				data: "anoReferencia",
				type: "text",
				required: true,
				searchable: true,
				visible: true,
				render: function (data) {
					return data;
				},
				name: "AnoReferencia"
			}
		]
		/* start data table */
		var myTable = $('#dt-basic-example')
			.dataTable({
			/* check datatable buttons page for more info on how this DOM structure works */
			dom: "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'B>>" +
				"<'row'<'col-sm-12'tr>>" +
				"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
			ajax: {
				url : apiAlunosLeiturasCronogramasLista,
				type: 'POST',
				dataSrc: function (json) {
					@* return transformObjArrayFieldBoolBackToFront(json.data.data); *@
					return transformObjArrayFieldBoolBackToFront(json.data.data);
				}
        	},
			aaSorting: [ [2,'asc'] ],
			scrollY:        400,
			scrollX:        true,
			scrollCollapse: true,
			serverSide: true,
			processing: true,
			altEditor: true,
			pagingType: "full_numbers",
			language: {
            	decimal: ",",
            	thousands: ".",
        		searchPlaceholder: "Busque pelo ANO REFERÊNCIA",
				sProcessing: '<span id=\"loading-image\" "class="fa fa-spinner fa-spin fa-2x spinner-border spinner-border-sm text-primary mr-2""><img class="manImg" src="img/loading_alt_3.gif" width="50" height="50"></img></span>',
				sZeroRecords: "Nenhum registro encontrado.",
				oPaginate: {
                    "sFirst": "Primeiro",
                    "sPrevious": "Anterior",
                    "sNext": "Próximo",
                    "sLast": "Último"
                },
				sInfo: "Mostrando _START_ de _END_ de um total de _TOTAL_",
                sInfoEmpty: "Nenhuma registro encontrado.",
                sInfoFiltered: " (filtrado a partir de um total de _MAX_ registros)",
                sInfoPostFix: "",
				select: {
					rows: "%d linhas selecionadas"
				}
        	},
			columns: columnSet,
			select: 'single',
			fixedColumns: {
				leftColumns: 3
			},
			buttons: [
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
					name: 'delete',
					titleAttr: 'Excluir registro',
					className: 'btn-danger btn-sm mr-1 btn-actions btn-delete'
				},
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Editar',
					name: 'edit',
					className: 'btn-warning btn-sm mr-1 btn-actions btn-edit'
				},
				{
					text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Novo',
					name: 'add',
					className: 'btn-primary btn-sm mr-1 btn-actions btn-add'
				},
				{
					extend: 'excelHtml5',
					text: 'Excel',
					exportOptions: {
						columns: [0, 1, 2, 3, 4, 5]
                	},
					className: 'btn-outline-success btn-sm',
					action: newExportAction
            	}						
			],
			columnDefs: [
				
			],
			onAddRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: apiAlunosLeiturasCronogramasNovo, 
					type: 'POST',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro criado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						debugger;
						$('#dt-basic-example').dataTable().api().ajax.reload();
						
						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onEditRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: apiAlunosLeiturasCronogramasEdicao, 
					type: 'PUT',
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro atualizado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						$('#dt-basic-example').dataTable().api().ajax.reload();

						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},
			onDeleteRow: function(dt, rowdata, success, error) {
				$.ajax({ 
					url: apiAlunosLeiturasCronogramasDelete, 
					type: 'DELETE', 
					contentType: "application/json;charset=utf-8",
					data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
					success: function (data) {
						$(".modal").modal('hide');
						$('#dt-basic-example').dataTable().api().ajax.reload();

						Swal.fire({
							text: "Registro deletado com sucesso!",
							icon: "success",
							timer: 2000,
							showCancelButton: false,
							showConfirmButton: true,
							confirmButtonColor: "#179c8e",
							timerProgressBar: true,
							buttons: false
						});
					},
					error: function (error, jqXHR, textStatus, errorThrown) {
						$('#dt-basic-example').dataTable().api().ajax.reload();

						const returnObj = Object.entries(error.responseJSON.errors);

						returnObj.forEach(function(err) {
							err[1].forEach(function (int) {
								toastr["error"](err[0], int);
							})
						});
					}
				});
			},		
		});

		$('#dt-basic-example_filter input').bind('keyup', function(e) {
			$('#dt-basic-example_filter input').val($('#dt-basic-example_filter input').val().toUpperCase());
		});
	});
</script>
}