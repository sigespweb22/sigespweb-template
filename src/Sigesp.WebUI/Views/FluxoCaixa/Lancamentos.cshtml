@model Sigesp.Application.ViewModels.Cards.LancamentoCardViewModel

@{
	ViewData["Title"] = "Lançamentos";
	ViewData["PageName"] = "fluxo-caixa_lancamentos";
	ViewData["Category0"] = @Settings.App;
	ViewData["Category1"] = "Pecúlio";
	ViewData["Category2"] = "Fluxo caixa";
	ViewData["Heading"] = "<i class='subheader-icon fal fa-clipboard-list-check'></i> Lançamentos<span class='fw-300'></span> <sup class='badge badge-primary fw-500'>NOVO</sup>";
	ViewData["PageDescription"] = "Listagem de todos os lançamentos";
}
@section HeadBlock {
	<link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/toastr/toastr.css">
	<link rel="stylesheet" media="screen, print" href="~/css/notifications/sweetalert2/sweetalert2.bundle.css">
}

<div class="row">
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-primary-300 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Pendentes
					<small class="m-0 l-h-n">Pendentes</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-credit-card-blank position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-warning-400 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Liquidados
					<small class="m-0 l-h-n">Liquidados</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-credit-card position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-success-200 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
					@Model.Creditos
					<small class="m-0 l-h-n">Lançamentos tipo crédito</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-user-plus position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
	<div class="col-sm-6 col-xl-3">
		<div class="p-3 bg-info-200 rounded overflow-hidden position-relative text-white mb-g">
			<div class="">
				<h3 class="display-4 d-block l-h-n m-0 fw-500">
				    @Model.Debitos
					<small class="m-0 l-h-n">Lançamentos tipo débito</small>
				</h3>
			</div>
			<i class="@(Settings.Theme.IconPrefix) fa-user-minus position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size: 6rem;"></i>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-xl-12">
		<div id="panel-1" class="panel">
			<div class="panel-hdr">	
				<h2>
					Gerenciamento dos <span class="fw-300"><i>Lançamentos</i></span> 
				</h2>
				<div class="panel-toolbar">
					<button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Abrir/Fechar"></button>
				</div>
			</div>
			<div class="panel-container show">
				<div class="panel-content">									
					<div class="tab-content pt-4">
						<div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
							<div class="row">
								<div class="col-xl-12">
									<table id="dt-basic-example" class="table table-bordered table-hover table-striped w-100"></table>
								</div>
							</div>	
						</div>
					</div>					
				</div>
			</div>
		</div>
	</div>
</div>

@section ScriptsBlock {
	<script src="~/js/dependency/moment/moment.js"></script>
	<script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
	<script src="~/js/formplugins/select2/select2.bundle.js"></script>
	<script src="~/js/datagrid/datatables/datatables.export.js"></script>
	<script src="~/js/notifications/toastr/toastr.js"></script>
	<script src="~/js/extensions/automapper-extensions.js"></script>
	<script src="~/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>

	<script type="text/javascript">
		const endpointFCLancamentos = "/api/fluxo-caixa/lancamentos/lista";
		const endpointFCLancamentosNovo = "/api/fluxo-caixa/lancamentos/novo";
		const endpointFCLancamentosEdicao = "/api/fluxo-caixa/lancamentos/edicao";
		const endpointFCLancamentosDelete = "/api/fluxo-caixa/lancamentos/delete";
		const endpointFCLancamentosLista = "/api/fluxo-caixa/lancamentos/lista";

		var periodosReferencia = [];
		var statusTodos = [];
		var empresas = [];
		var tiposLancamento = [];
		var contabilEventos = [];
		var boolOptions = ["NÃO", "SIM"];

		var oldExportAction = function (self, e, dt, button, config) {
			if (button[0].className.indexOf('buttons-excel') >= 0) {
				if ($.fn.dataTable.ext.buttons.excelHtml5.available(dt, config)) {
					$.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config);
				}
				else {
					$.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
				}
			} else if (button[0].className.indexOf('buttons-print') >= 0) {
				$.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
			}
		};

		var newExportAction = function (e, dt, button, config) {
			var self = this;
			var oldStart = dt.settings()[0]._iDisplayStart;

			dt.one('preXhr', function (e, s, data) {
				// Just this once, load all data from the server...
				data.start = 0;
				data.length = 2147483647;

				dt.one('preDraw', function (e, settings) {
					// Call the original action function 
					oldExportAction(self, e, dt, button, config);

					dt.one('preXhr', function (e, s, data) {
						// DataTables thinks the first item displayed is index 0, but we're not drawing that.
						// Set the property to what it was before exporting.
						settings._iDisplayStart = oldStart;
						data.start = oldStart;
					});

					// Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
					setTimeout(dt.ajax.reload, 0);

					// Prevent rendering of the full data to the DOM
					return false;
				});
			});

			// Requery the server with the new one-time export settings
			dt.ajax.reload();
		};

		@foreach (var periodoReferencia in @Model.PeriodosReferencia)
		{
			@:periodosReferencia.push('@periodoReferencia');
		}

		@foreach (var item in @Model.Status)
		{
			@:statusTodos.push('@item');
		}

		@foreach (var empresa in @Model.Empresas)
		{
			@:empresas.push('@empresa');
		}

		@foreach (var tipoLancamento in @Model.TiposLancamento)
		{
			@:tiposLancamento.push('@tipoLancamento');
		}

		@foreach (var contabilEvento in @Model.ContabilEventos)
		{
			@:contabilEventos.push('@contabilEvento');
		}

		toastr.options = {
			"closeButton": false,
			"debug": false,
			"newestOnTop": true,
			"progressBar": true,
			"positionClass": "toast-top-right",
			"preventDuplicates": true,
			"onclick": null,
			"showDuration": 500,
			"hideDuration": 100,
			"timeOut": 10000,
			"extendedTimeOut": 1000,
			"showEasing": "swing",
			"hideEasing": "linear",
			"showMethod": "fadeIn",
			"hideMethod": "fadeOut"
		};

		var getSaldoByLctoIdAndCCTipo = function () {
			var empresaRazaoSocial = $("#empresaRazaoSocial option:selected").val();
			var lancamentoId = $("#id").val();
			var ccTipo = $("#contaCorrenteIsTipoCofre option:selected").val() == "NÃO" ? 
							false : $("#contaCorrenteIsTipoCofre option:selected").val() == "SIM" ? true : false;

			var contaCorrenteViewModel = {
				LancamentoId: lancamentoId,
				EmpresaRazaoSocial: empresaRazaoSocial,
				IsTipoCofre: ccTipo
			};
 
			$.ajax({
				url: "api/contas-correntes/get-saldoSemLcto-by-lctoId-empresaRazaoSocial-tipo", 
				type: 'POST',
				contentType: "application/json;charset=utf-8",
				data: JSON.stringify(contaCorrenteViewModel, null, 4),
				success: function(success) {
					debugger;
					var lancamentoTipo = $("#tipo option:selected").val();

					if ($("#valorLiquido").val() == '')
					{
						$("#valorLiquido").val(0);
					}
					
					var lancamentoValor = parseFloat($("#valorLiquido").val());

					var subTotal = parseFloat(success.data);

					var saldo = lancamentoTipo == 'CREDITO' ? 
										subTotal + lancamentoValor :
										lancamentoValor - subTotal;

					$("input[name=Saldo]").val(saldo);
				},
				error: function (error, jqXHR, textStatus, errorThrown) {
					const returnObj = Object.entries(error.responseJSON.errors);

					returnObj.forEach(function(err) {
						err[1].forEach(function (int) {
							toastr["error"](err[0], int);
						})
					});
				}
			});
		};

		var toUpperCaseFormFields = function () {
			$('#observacao').val($('#observacao').val().toUpperCase());
		};

		$(document).ready( function () {

			//Tecla de atalho para criar um novo registro (Teclado 'S + N')			
			$(document).keydown(function(e) {
				if (e.ctrlKey && e.which === 90) $(".btn-add").click();

				toUpperCaseFormFields();
			});

			//No evento de click do botão add, set focus no campo nome depois abre a select2
			$(document).on("click", ".btn-add", function () {
				//set default value em valorLiquido
				setTimeout(function() {
					$('#valorLiquido').val(0);
    			}, 500);

				setTimeout(function() {
					$('#contaCorrenteIsTipoCofre').select2('focus');
					getSaldoByLctoIdAndCCTipo();
    			}, 500);

				setTimeout(function() {
					$('#descricao').trigger('focus');
    			}, 500);

				$('#status').select2().val('LIQUIDADO');
				$('#status').select2();
			});

			//No evento de click do botão edit, set focus no campo nome depois abre a select2
			$(document).on("click", ".btn-edit", function () {

				setTimeout(function() {
					getSaldoByLctoIdAndCCTipo();
    			}, 500);
			});

			//No evento de click do botão add, set focus no campo nome depois abre a select2
			$(document).on("click", ".btn-edit", function () {
				//set default value em valorLiquido
				setTimeout(function() {
					$('#contaCorrenteIsTipoCofre').select2("enable", false)
					$('#empresaRazaoSocial').select2("enable", false)					
    			}, 500);

				setTimeout(function() {
					$('#contabilEventoEspecificacao').select2('focus');
    			}, 500);
			});

			// Event Lot
			var events = $("#app-eventlog");
			// Column Definitions
			var columnSet = [
				{
					title: "Id",
					id: "id",
					data: "id",
					placeholderMsg: "Automático",
					visible: false,
					type: "readonly",
					required: false
				},
				{
					title: "Conta corrente cofre?",
					data: "contaCorrenteIsTipoCofre",
					type: "select",
					multiple : false,
					visible: true,
					options: boolOptions,
					select2 : {
						placeholder: "Selecione um tipo conta corrente da empresa",
						width: "100%",
						allowClear: true,
						minimumInputLength: 3,
						language: {
							inputTooShort: function() {
								return 'Digite 3 ou mais caracteres para iniciar a busca';
							}
						}
					},
					render : function (data, type, row, meta) {
						return data;
					},
					required: true,
					editorOnChange : function(event, altEditor) {
						getSaldoByLctoIdAndCCTipo();
					},
					searchable: false,
					orderable: true
				},
				{
					title: "Empresa",
					data: "empresaRazaoSocial",
					type: "select",
					multiple : false,
					visible: true,
					options: empresas,
					select2 : {
						placeholder: "Selecione uma empresa",
						width: "100%",
						allowClear: true,
						minimumInputLength: 3,
						language: {
							inputTooShort: function() {
								return 'Digite 3 ou mais caracteres para iniciar a busca';
							}
						}
					},
					render : function (data, type, row, meta) {
						return data;
					},
					required: true,
					editorOnChange : function(event, altEditor) {
						getSaldoByLctoIdAndCCTipo();
					},
					searchable: true,
					orderable: true,
					name: "ContaCorrente.Empresa.RazaoSocial"
				},
				{
					title: "Evento",
					data: "contabilEventoEspecificacao",
					type: "select",
					options: contabilEventos,
					multiple : false,
					visible: true,
					select2 : {
						placeholder: "Selecione um evento contábil",
						width: "100%",
						allowClear: true,
						minimumInputLength: 3,
						language: {
							inputTooShort: function() {
								return 'Digite 3 ou mais caracteres para iniciar a busca';
							}
						}
					},
					render: function (data, type, row, meta) {
						return data;
					},
					required: true,
					searchable: false,
					orderable: true,
					name: "ContabilEvento.Especificacao"
				},
				{
					title: "Data lançamento",
					id: "createdAt",	
					data: "createdAt",
					type: "date",
					required: false,
					searchable: false,
					visible: true,
					render: function (data) {
						return moment(data).format('DD/MM/YYYY');
					},
					name: "CreatedAt"
				},
				{
					title: "Período data início",
					data: "periodoDataInicio",
					type: "number",
					placeholderMsg: "Informe a data início do período",
					visible: false,					
					required: false,
					searchable: false,					
					name: "PeriodoDataInicio"	
				},
				{
					title: "Período data fim",
					data: "periodoDataFim",
					type: "number",
					placeholderMsg: "Informe a data fim do período",
					visible: false,					
					required: false,
					searchable: false,					
					name: "PeriodoDataFim"				
				},
				{
					title: "Tipo lançamento",
					data: "tipo",
					type: "select",
					options: tiposLancamento,
					multiple : false,
					visible: true,
					select2 : { width: "100%" },
					render : function (data, type, row, meta) {
						return data;
					},
					required: true,
					editorOnChange : function(event, altEditor) {
						getSaldoByLctoIdAndCCTipo();
					},
					searchable: false,
					orderable: true,
					name: "Tipo"
				},
				{
					title: "Valor líquido (R$)",
					data: "valorLiquido",
					type: "number",
					placeholderMsg: "Informe o valor líquido",
					visible: true,					
					required: false,
					editorOnBlur : function(event, altEditor) {
						getSaldoByLctoIdAndCCTipo();
					},
					searchable: false,
					orderable: true,
					name: "ValorLiquido"	
				},
				{
					title: "Status",
					data: "status",
					type: "select",
					options: statusTodos,
					multiple : false,
					visible: true,
					select2 : { width: "100%" },
					render : function (data, type, row, meta) {
						return data;
					},
					required: true,
					searchable: false,
					orderable: true,
					name: "Status"
				},
				{
					id: "saldo",
					title: "Saldo",
					data: "saldo",
					placeholderMsg: "Automático",
					visible: false,
					type: "readonly",
					required: false,
					searchable: false,					
					name: "ContaCorrente.Saldo"
				},												
				{
					title: "Observação",
					data: "observacao",
					type: "text",
					placeholderMsg: "Informe uma observação",
					visible: true,					
					required: false,
					searchable: false,
					orderable: false,
					name: "Observacao"		
				}
			];
		
			/* start data table */
			var myTable = $('#dt-basic-example').dataTable({
				/* check datatable buttons page for more info on how this DOM structure works */
				dom: "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'B>>" +
					"<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
				sPaginationType: "full_numbers",
				ajax: {
					url : endpointFCLancamentos,
					type: 'POST',
					dataSrc: function (json) {
						return transformObjArrayFieldBoolBackToFront(json.data.data);
					}
				},
				columns: columnSet,
				/* selecting multiple rows will not work */
				select: 'single',
				/* altEditor at work */
				altEditor: true,
				responsive: true,
				/* buttons uses classes from bootstrap, see buttons page for more details */
				buttons: [
					{
						extend: 'selected',
						text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
						name: 'delete',
						className: 'btn-danger btn-sm mr-1'
					},
					{
						extend: 'selected',
						text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Editar',
						name: 'edit',
						className: 'btn-warning btn-sm mr-1 btn-edit'
					},
					{
						text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Novo',
						name: 'add',
						className: 'btn-primary btn-sm mr-1 btn-add'
					},
					{
						extend: 'excelHtml5',
						text: 'Excel',
						exportOptions: {
							columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
						},
						className: 'btn-outline-success btn-sm',
						action: newExportAction
					}
				],
				serverSide: true,
				processing: true,
				pagingType: "full_numbers",
				language: {
					select: {
						rows: "%d linhas selecionadas"
					},
					decimal: ",",
					thousands: ".",
					searchPlaceholder: "Busque pela razão social empresa",
					sProcessing: '<span id=\"loading-image\" "class="fa fa-spinner fa-spin fa-2x spinner-border spinner-border-sm text-primary mr-2""><img class="manImg" src="img/loading_alt_3.gif" width="50" height="50"></img></span>',
					sZeroRecords: "Nenhum registro encontrado.",
					oPaginate: {
						"sFirst": "Primeiro",
						"sPrevious": "Anterior",
						"sNext": "Próximo",
						"sLast": "Último"
					},
					sInfo: "Mostrando _START_ de _END_ de um total de _TOTAL_",
					sInfoEmpty: "Nenhuma registro encontrado.",
					sInfoFiltered: " (filtrado a partir de um total de _MAX_ registros)",
					sInfoPostFix: ""
				},
				columnDefs: [
					{
						targets: 8,
						type: 'currency',
						render: function(data, type, full, meta) {
							//var number = Number(data.replace(/[^0-9.-]+/g,""));
							if (data >= 0) {
								return '<span class="text-success fw-500">R$ '+data+'</span>';
							} else {
								return '<span class="text-danger fw-500">R$ '+data+'</span>';
							}
						},
					}
				],
				/* default callback for insertion: mock webservice, always success */
				onAddRow: function(dt, rowdata, success, error) {
					$.ajax({ 
						url: endpointFCLancamentosNovo, 
						type: 'POST',
						contentType: "application/json;charset=utf-8",
						@* headers:{
							"Authorization": "Basic " + ""
						}, *@
						data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
						success: function (data) {
							$(".modal").modal('hide');
							$('#dt-basic-example').dataTable().api().ajax.reload();

							Swal.fire({
								text: "Registro criado com sucesso!",
								icon: "success",
								timer: 2000,
								showCancelButton: false,
								showConfirmButton: true,
								confirmButtonColor: "#179c8e",
								timerProgressBar: true,
								buttons: false
							});
						},
						error: function (error, jqXHR, textStatus, errorThrown) {							
							$('#dt-basic-example').dataTable().api().ajax.reload();

							const returnObj = Object.entries(error.responseJSON.errors);

							returnObj.forEach(function(err) {
								err[1].forEach(function (int) {
									toastr["error"](err[0], int);
								})
							});
						}
					});
				},
				onEditRow: function(dt, rowdata, success, error) {
					$.ajax({ 
						url: endpointFCLancamentosEdicao, 
						type: 'PUT',
						contentType: "application/json;charset=utf-8",
						data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
						success: function (data) {
							$(".modal").modal('hide');
							$('#dt-basic-example').dataTable().api().ajax.reload();

							Swal.fire({
								text: "Registro atualizado com sucesso!",
								icon: "success",
								timer: 2000,
								showCancelButton: false,
								showConfirmButton: true,
								confirmButtonColor: "#179c8e",
								timerProgressBar: true,
								buttons: false
							});
						},
						error: function (error, jqXHR, textStatus, errorThrown) {
							$('#dt-basic-example').dataTable().api().ajax.reload();

							const returnObj = Object.entries(error.responseJSON.errors);

							returnObj.forEach(function(err) {
								err[1].forEach(function (int) {
									toastr["error"](err[0], int);
								})
							});
						}
					});
				},
				onDeleteRow: function(dt, rowdata, success, error) {
					$.ajax({ 
						url: endpointFCLancamentosDelete, 
						type: 'DELETE', 
						contentType: "application/json;charset=utf-8",
						data: JSON.stringify(transformObjFieldBoolFrontToBack(rowdata), null, 4),
						success: function (data) {
							$(".modal").modal('hide');
							$('#dt-basic-example').dataTable().api().ajax.reload();

							Swal.fire({
								text: "Registro deletado com sucesso!",
								icon: "success",
								timer: 2000,
								showCancelButton: false,
								showConfirmButton: true,
								confirmButtonColor: "#179c8e",
								timerProgressBar: true,
								buttons: false
							});
						},
						error: function (error, jqXHR, textStatus, errorThrown) {
							$('#dt-basic-example').dataTable().api().ajax.reload();

							const returnObj = Object.entries(error.responseJSON.errors);

							returnObj.forEach(function(err) {
								err[1].forEach(function (int) {
									toastr["error"](err[0], int);
								})
							});
						}
					});
				}
			});

			$('#dt-basic-example_filter input').bind('keyup', function(e) {
			$('#dt-basic-example_filter input').val($('#dt-basic-example_filter input').val().toUpperCase());

				@* if(e.keyCode == 13) {
					myTable.fnFilter(this.value);
				} 	*@
			});

		});
	</script>
}