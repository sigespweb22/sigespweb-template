@using System.Security.Claims
@using Sigesp.Infra.Data.Context
@using Sigesp.WebUI.Pages
@inject SigespDbContext DbContext
@{
    ViewData["Title"] = "Interactive Instructions";
    ViewData["PageName"] = "aspnetcore_interactive";
    ViewData["Heading"] = "<i class='fal fa-tools'></i> Interactive: <span class='fw-300'>Modifying the Project</span>";
    var roleName = User.FindFirst(ClaimTypes.Role)?.Value ?? "Guest";
    var returnUrl = new Dictionary<string, string> { { "returnUrl", Url.Action("Interactive", "AspNetCore") } };
    var dbVersion = DbContext.Database.ProviderName;
}

@section HeadBlock {
    <!-- // Note if you wish to use Blazor in other pages of this Project then please move the base element to the _Layout.cshtml file. -->
    <base href="~/" />
}

<div class="row">
    <div class="col-xl-12">
        <div class="panel">
            <div class="panel-container show">
                <div class="panel-content">
                    The instructions below are <strong>interactive</strong>, this means that they are built with coding logic enabled that responds to the purpose of the instruction.
                    We hope this approach can assist you with ensuring that the instruction has been carried out correctly and therefor acts as a confirmation when you followed the lesson correctly!
                    So please give them a try!
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12">
        <div class="panel">
            <div class="panel-hdr">
                <h2>Enable Authorization on the Navigation Menu</h2>
            </div>
            <div class="panel-container show">
                <div class="panel-content">
                    <section>
                        <ol class="list-spaced">
                            <li>
                                Navigate to the folder containing the extracted project package and double-click the <code>SigespCore.sln</code> file
                            </li>
                            <li>
                                Once the solution has finished loading open the <code>nav.json</code> file in the root of the project
                            </li>
                            <li>
                                Scroll down to about <code>Line 141</code> to find the <strong>Tools & Components</strong> menu item
                            </li>
                            <li>
                                You should see a new property that was added in this release to the menu item called <code>roles</code>:
                                <pre class="prettyprint lang-js mb-0 mt-2">&quot;roles&quot;: [ &quot;Administrator&quot; ]</pre>
                            </li>
                            <li>As you can see we have added an extra instruction that this menu item should only be visible for <strong>Administrators</strong></li>
                            <li>
                                So let's check this now, it seems that you are currently logged in as the <code>@roleName</code> role
                                @if (User.IsInRole("Administrator"))
                                {
                                    <div class="alert alert-success mb-0 mt-1 p-1">
                                        Hurray! You already have the correct role!
                                        Did you want to test it as <strong>Guest</strong> first?
                                        You can logout by clicking here: <a asp-area="Identity" asp-page="/account/logout" asp-all-route-data="returnUrl">Logout</a>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning mb-0 mt-1 p-1">
                                        This means you are currently not logged in!
                                        Let's fix that by clicking here: <a asp-area="Identity" asp-page="/account/login" asp-all-route-data="returnUrl">Login</a>
                                    </div>
                                }
                                <div class="alert alert-info mb-0 mt-1 p-1">
                                    As you might have noticed, the menu on the left may not have changed at all by logging in or viewing it as a <strong>Guest</strong>!
                                    This is because by default the Navigation is not enabled to be role aware, so let's change that!
                                </div>
                            </li>
                            <li>Open the <code>Default.cshtml</code> file in the <strong>Views/Shared/Components/Navigation</strong> folder of your project</li>
                            <li>
                                With the file open goto around <code>Line 6</code> and you should see the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">@@foreach (var group in menu.Lists)</pre>
                            </li>
                            <li>
                                Change or Replace this line of code with the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">@@foreach (var group in menu.Lists.AuthorizeFor(User))</pre>
                                <div class="alert alert-success mb-0 mt-1 p-1">
                                    Authorization is now enabled and the <code>AuthorizeFor</code> extension method will verify the user role with that of the menu item.
                                    If the menu item has no roles available it will be shown regardless of role.
                                </div>
                            </li>
                            <li>Now refresh this page and/or <a asp-area="Identity" asp-page="/account/login" asp-all-route-data="returnUrl">Login</a> and you should see the menu change!</li>
                        </ol>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12">
        <div class="panel">
            <div class="panel-hdr">
                <h2>Changing the default database from SQLite to SQL Server</h2>
            </div>
            <div class="panel-container show">
                <div class="panel-content">
                    <section>
                        <ol class="list-spaced">
                            <li>
                                Navigate to the folder containing the extracted project package and double-click the <code>SigespCore.sln</code> file
                            </li>
                            <li>
                                Once the solution has finished loading open the <code>Startup.cs</code> file in the root of the project
                            </li>
                            <li>
                                With the file open goto around <code>Line 35</code> and you should see the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">services.AddDbContext&lt;SigespDbContext&gt;(options =&gt; options.UseSqlite(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));</pre>
                            </li>
                            <li>
                                Change or Replace this line of code with the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">services.AddDbContext&lt;SigespDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));</pre>
                            </li>
                            <li>
                                This will instruct Entity Framework to connect to a Microsoft SQL Server Database.
                                <div class="alert alert-warning mb-0 mt-1 p-1">
                                    <strong>Note:</strong> You might get a warning or an error stating that <code>UseSqlServer</code> is not recognized, this means we will need to add a reference to the <strong>SqlServer</strong> NuGet package for Entity Framework Core
                                </div>
                            </li>
                            <li>Right click the <strong>Sigesp.WebUI</strong> project and choose the option: <code>Edit Project File</code></li>
                            <li>
                                With the file open goto around <code>Line 17</code> and you should see the following line of code:
                                <pre class="prettyprint lang-xml mb-0 mt-2">&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Sqlite&quot; Version=&quot;3.1.2&quot; /&gt;</pre>
                            </li>
                            <li>
                                Change or Replace this line of code with the following line of code:
                                <pre class="prettyprint lang-xml mb-0 mt-2">&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.SqlServer&quot; Version=&quot;3.1.2&quot; /&gt;</pre>
                                <div class="alert alert-info mb-0 mt-1 p-1">
                                    <strong>Note:</strong> You can also change the NuGet packages of your project by right-clicking the <strong>SigespCore</strong> solution and choosing the option: <code>Manage NuGet Packages for Solution..</code>
                                </div>
                            </li>
                            <li>Last but not least we will need to modify the <strong>ConnectionString</strong> of the application to connect to your SQL Server instance</li>
                            <li>Open the <code>appsettings.json</code>file in the root of your project</li>
                            <li>
                                With the file open goto around <code>Line 3</code> and you should see the following line of code:
                                <pre class="prettyprint lang-js mb-0 mt-2">&quot;DefaultConnection&quot;: &quot;DataSource=app.db&quot;</pre>
                            </li>
                            <li>
                                Change or Replace this line of code with the following line of code:
                                <pre class="prettyprint lang-js mb-0 mt-2">&quot;DefaultConnection&quot;: &quot;Data Source=YourServerAddress;Initial Catalog=YourDatabase;User ID=YourUser;Password=YourPassword;Connect Timeout=20;ApplicationIntent=ReadWrite;MultipleActiveResultSets=true&quot;</pre>
                                <div class="alert alert-danger mb-0 mt-1 p-1">
                                    <strong>Note:</strong> Be sure to replace the <code>YourXxxx</code> values with the actual values of your SQL Server instance and credentials!
                                </div>
                            </li>
                            <li>
                                In order to re-create the database schema in your new targeted database we will have to remove the <strong>Migrations</strong> folder from the project.
                                Once this has been done you can re-apply the new schema by typing the following:
                                <pre class="prettyprint lang-js mb-0 mt-2">Add-Migration InitialCreate</pre>
                                Followed by updating your targeted database, by typing the following:
                                <pre class="prettyprint lang-js mb-0 mt-2">Update-Database</pre>
                            </li>
                            <li>
                                Phew! That was quite the effort, so let's check the result: You are currently using <code>@dbVersion</code> as your data store.
                                @if (dbVersion.Contains("Sqlite"))
                                {
                                    <div class="alert alert-warning mb-0 mt-1 p-1">
                                        It seems you are (still) using SQLite.<br/>
                                        Please follow the instructions above and refresh this page to see the result!
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-success mb-0 mt-1 p-1">
                                        Hurray! You have switched to SQL Server successfully!
                                    </div>
                                }
                            </li>
                        </ol>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12">
        <div class="panel">
            <div class="panel-hdr">
                <h2>Adding support for Blazor to the Project</h2>
            </div>
            <div class="panel-container show">
                <div class="panel-content">
                    <section>
                        <ol class="list-spaced">
                            <li>
                                Navigate to the folder containing the extracted project package and double-click the <code>SigespCore.sln</code> file
                            </li>
                            <li>
                                Once the solution has finished loading open the <code>Startup.cs</code> file in the root of the project
                            </li>
                            <li>
                                With the file open goto around <code>Line 48</code> and you should see the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">services.AddRazorPages();</pre>
                            </li>
                            <li>
                                Add the following line of code directly beneath:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">services.AddServerSideBlazor();</pre>
                            </li>
                            <li>
                                Now goto around <code>Line 85</code> and you should see the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">endpoints.MapRazorPages();</pre>
                            </li>
                            <li>
                                Add the following line of code directly beneath:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">endpoints.MapBlazorHub();</pre>
                            </li>
                            <li>
                                This will instruct .NET to setup the Blazor Hub and establish a connection upon startup.
                                <div class="alert alert-warning mb-0 mt-1 p-1">
                                    <strong>Note:</strong> You might get a warning or an error stating that <code>No connection could be established</code>, this means that a plugin might be interfering with the definition of <strong>WebSocket</strong>.
                                </div>
                            </li>
                            <li>
                                Let's fix that error right-away! Open the <code>_ScriptBasePlugins.cshtml</code> file in the <strong>Views/Shared</strong> folder of the project
                            </li>
                            <li>
                                With the file open goto around <code>Line 2</code> and you should see the following line of code:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">&lt;script src=&quot;~/js/app.bundle.js&quot;&gt;&lt;/script&gt;</pre>
                            </li>
                            <li>
                                Add the following lines of code directly beneath:
                                <pre class="prettyprint lang-csharp mb-0 mt-2">
&lt;script&gt;
    // this call is required to remap WebSocket as this is overridden by Pace.js plugin ! :-(
    Object.defineProperty(WebSocket, &#39;OPEN&#39;, { value: 1 });
&lt;/script&gt;
&lt;script src=&quot;~/_framework/blazor.server.js&quot;&gt;&lt;/script&gt;</pre>
                            </li>
                            <li>
                                This will enable the listener framework to be setup as such that the pages can "communicate" with your code.
                                <div class="alert alert-info mb-0 mt-1 p-1">
                                    <strong>Note:</strong> The <code>blazor.server.js</code> file is generated at <strong>runtime</strong>, as such it is not available on disk or in your project.
                                </div>
                            </li>
                            <li>
                                Now rebuild your project and launch it! If everything went well then the item below should show you the rendered contents
                                of the <code>HelloWorld.razor</code> file located in the <strong>Pages</strong> folder in the root of your Project; Blazor support should now be available in Sigesp!
                            </li>
                            <component type="typeof(HelloWorld)" render-mode="ServerPrerendered" />
                        </ol>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

@section ScriptsBlock {
    <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
}